//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfaceATM.BankAccountServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BankAccountServiceReference.BankAccountManagementServiceSoap")]
    public interface BankAccountManagementServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowAllAccounts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ShowAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowAllAccounts", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ShowAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowTotalAmountOfAccounts", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int ShowTotalAmountOfAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowTotalAmountOfAccounts", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ShowTotalAmountOfAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowAccountsForCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ShowAccountsForCustomer(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShowAccountsForCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ShowAccountsForCustomerAsync(int customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteBankAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool DeleteBankAccount(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteBankAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteBankAccountAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOpenDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.DateTime GetOpenDate(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOpenDate", ReplyAction="*")]
        System.Threading.Tasks.Task<System.DateTime> GetOpenDateAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRunningTotal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetRunningTotal(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRunningTotal", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> GetRunningTotalAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetRunningTotal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetRunningTotal(int accountID, decimal runningTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetRunningTotal", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetRunningTotalAsync(int accountID, decimal runningTotal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAccountType(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAccountTypeAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountPin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetAccountPin(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccountPin", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAccountPinAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAccountPin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetAccountPin(int accountID, string customerPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAccountPin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetAccountPinAsync(int accountID, string customerPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateCurrentBankAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CreateCurrentBankAccount(int customerID, string accountPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateCurrentBankAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CreateCurrentBankAccountAsync(int customerID, string accountPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOverdraftLimit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetOverdraftLimit(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOverdraftLimit", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> GetOverdraftLimitAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetOverdraftLimit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetOverdraftLimit(int accountID, decimal overdraftLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetOverdraftLimit", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetOverdraftLimitAsync(int accountID, decimal overdraftLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateSavingsBankAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CreateSavingsBankAccount(int customerID, string accountPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateSavingsBankAccount", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CreateSavingsBankAccountAsync(int customerID, string accountPin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInterestRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        decimal GetInterestRate(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetInterestRate", ReplyAction="*")]
        System.Threading.Tasks.Task<decimal> GetInterestRateAsync(int accountID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetInterestRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetInterestRate(int accountID, decimal interestRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetInterestRate", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetInterestRateAsync(int accountID, decimal interestRate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BankAccountManagementServiceSoapChannel : InterfaceATM.BankAccountServiceReference.BankAccountManagementServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankAccountManagementServiceSoapClient : System.ServiceModel.ClientBase<InterfaceATM.BankAccountServiceReference.BankAccountManagementServiceSoap>, InterfaceATM.BankAccountServiceReference.BankAccountManagementServiceSoap {
        
        public BankAccountManagementServiceSoapClient() {
        }
        
        public BankAccountManagementServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankAccountManagementServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankAccountManagementServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankAccountManagementServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable ShowAllAccounts() {
            return base.Channel.ShowAllAccounts();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ShowAllAccountsAsync() {
            return base.Channel.ShowAllAccountsAsync();
        }
        
        public int ShowTotalAmountOfAccounts() {
            return base.Channel.ShowTotalAmountOfAccounts();
        }
        
        public System.Threading.Tasks.Task<int> ShowTotalAmountOfAccountsAsync() {
            return base.Channel.ShowTotalAmountOfAccountsAsync();
        }
        
        public System.Data.DataTable ShowAccountsForCustomer(int customerID) {
            return base.Channel.ShowAccountsForCustomer(customerID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ShowAccountsForCustomerAsync(int customerID) {
            return base.Channel.ShowAccountsForCustomerAsync(customerID);
        }
        
        public bool DeleteBankAccount(int accountID) {
            return base.Channel.DeleteBankAccount(accountID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBankAccountAsync(int accountID) {
            return base.Channel.DeleteBankAccountAsync(accountID);
        }
        
        public System.DateTime GetOpenDate(int accountID) {
            return base.Channel.GetOpenDate(accountID);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetOpenDateAsync(int accountID) {
            return base.Channel.GetOpenDateAsync(accountID);
        }
        
        public decimal GetRunningTotal(int accountID) {
            return base.Channel.GetRunningTotal(accountID);
        }
        
        public System.Threading.Tasks.Task<decimal> GetRunningTotalAsync(int accountID) {
            return base.Channel.GetRunningTotalAsync(accountID);
        }
        
        public bool SetRunningTotal(int accountID, decimal runningTotal) {
            return base.Channel.SetRunningTotal(accountID, runningTotal);
        }
        
        public System.Threading.Tasks.Task<bool> SetRunningTotalAsync(int accountID, decimal runningTotal) {
            return base.Channel.SetRunningTotalAsync(accountID, runningTotal);
        }
        
        public string GetAccountType(int accountID) {
            return base.Channel.GetAccountType(accountID);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountTypeAsync(int accountID) {
            return base.Channel.GetAccountTypeAsync(accountID);
        }
        
        public string GetAccountPin(int accountID) {
            return base.Channel.GetAccountPin(accountID);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountPinAsync(int accountID) {
            return base.Channel.GetAccountPinAsync(accountID);
        }
        
        public bool SetAccountPin(int accountID, string customerPin) {
            return base.Channel.SetAccountPin(accountID, customerPin);
        }
        
        public System.Threading.Tasks.Task<bool> SetAccountPinAsync(int accountID, string customerPin) {
            return base.Channel.SetAccountPinAsync(accountID, customerPin);
        }
        
        public bool CreateCurrentBankAccount(int customerID, string accountPin) {
            return base.Channel.CreateCurrentBankAccount(customerID, accountPin);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCurrentBankAccountAsync(int customerID, string accountPin) {
            return base.Channel.CreateCurrentBankAccountAsync(customerID, accountPin);
        }
        
        public decimal GetOverdraftLimit(int accountID) {
            return base.Channel.GetOverdraftLimit(accountID);
        }
        
        public System.Threading.Tasks.Task<decimal> GetOverdraftLimitAsync(int accountID) {
            return base.Channel.GetOverdraftLimitAsync(accountID);
        }
        
        public bool SetOverdraftLimit(int accountID, decimal overdraftLimit) {
            return base.Channel.SetOverdraftLimit(accountID, overdraftLimit);
        }
        
        public System.Threading.Tasks.Task<bool> SetOverdraftLimitAsync(int accountID, decimal overdraftLimit) {
            return base.Channel.SetOverdraftLimitAsync(accountID, overdraftLimit);
        }
        
        public bool CreateSavingsBankAccount(int customerID, string accountPin) {
            return base.Channel.CreateSavingsBankAccount(customerID, accountPin);
        }
        
        public System.Threading.Tasks.Task<bool> CreateSavingsBankAccountAsync(int customerID, string accountPin) {
            return base.Channel.CreateSavingsBankAccountAsync(customerID, accountPin);
        }
        
        public decimal GetInterestRate(int accountID) {
            return base.Channel.GetInterestRate(accountID);
        }
        
        public System.Threading.Tasks.Task<decimal> GetInterestRateAsync(int accountID) {
            return base.Channel.GetInterestRateAsync(accountID);
        }
        
        public bool SetInterestRate(int accountID, decimal interestRate) {
            return base.Channel.SetInterestRate(accountID, interestRate);
        }
        
        public System.Threading.Tasks.Task<bool> SetInterestRateAsync(int accountID, decimal interestRate) {
            return base.Channel.SetInterestRateAsync(accountID, interestRate);
        }
    }
}
